"""
The Comptroller type has protocol level variables stored
"""
type Comptroller @entity {
    "ID is set to 1 since there is only one Comptroller"
    id: ID!
    "Address of price oracle the comptroller uses"
    priceOracle: String
    "Factor used to determine repayAmount for liquidating"
    closeFactor: BigInt
    "The percent bonus liquidators get for liquidating"
    liquidationIncentive: BigInt
    "Max assets a single user can enter"
    maxAssets: BigInt
}

"""
Market stores all high level variables for a cToken market
"""
type Market @entity {
    #Fields that match compounds API
    "CToken address"
    id: ID!
    "Yearly borrow rate. With 2628000 blocks per year"
    borrowRate: BigInt!
    "Yearly supply rate. With 2104400 blocks per year"
    supplyRate: BigInt!
    "Collateral factor determining how much one can borrow"
    collateralFactor: BigInt!
    "Exchange rate of tokens / cTokens"
    exchangeRate:  BigInt!
    "Address of the interest rate model"
    interestRateModelAddress: String!
    "Name of the cToken"
    name: String!
    "CToken symbol"
    symbol: String!
    "The cToken contract balance of ERC20 or ETH"
    cash: BigInt!
    "Reserves stored in the contract"
    reserves: BigInt!
    "Borrows in the market"
    totalBorrows: BigInt!
    "CToken supply. CTokens have 8 decimals"
    totalSupply: BigInt!
    "Underlying token address"
    underlyingAddress: String!
    "Underlying token name"
    underlyingName: String!
    "Underlying token symbol"
    underlyingSymbol: String!
    "Underlying token price in USD"
    underlyingPriceUSD: BigInt!
    "Underlying token decimal length"
    underlyingDecimals: Int!

    # Fields that are not in compounds api
    "Block the market is updated to"
    accrualBlockNumber: Int!
    "Timestamp the market was most recently updated"
    blockTimestamp: Int!
    "The history of the markets borrow index return (Think S&P 500)"
    borrowIndex: BigInt!
    "The factor determining interest that goes to reserves"
    reserveFactor: BigInt!
}

"""
Account is an EVM address, with a list of all cToken markets the account has
participated in, along with liquidation information.
"""
type Account @entity {
    "User EVM address"
    id: ID!
    "Array of CTokens user is in"
    tokens: [AccountCToken!]! @derivedFrom(field: "account")
    "Count user has been liquidated"
    countLiquidated: Int!
    "Count user has liquidated others"
    countLiquidator: Int!
    "True if user has ever borrowed"
    hasBorrowed: Boolean!

    # The following values are added by the JS Wrapper, and must be calculated with the most up
    # to date values based on the block delta for market.exchangeRate and market.borrowIndex
    # They do not need to be in the schema, but they will show up in the explorer playground

    # "If less than 1, the account can be liquidated
    # health: BigInt!
    # "Total assets supplied by user"
    # totalBorrowValueInEth: BigInt!
    # "Total assets borrowed from user"
    # totalCollateralValueInEth: BigInt!
}

"""
AccountCToken is a single account within a single cToken market, with data such
as interest earned or paid
"""
type AccountCToken @entity {
    "Concatenation of CToken address and user address"
    id: ID!
    "Relation to market"
    market: Market!
    "Symbol of the cToken"
    symbol: String!
    "Relation to user"
    account: Account!
    "Transactions data"
    transactions: [AccountCTokenTransaction!]! @derivedFrom(field:"account")
    "Block number this asset was updated at in the contract"
    accrualBlockNumber: BigInt!
    "True if user is entered, false if they are exited"
    enteredMarket: Boolean!

    "CToken balance of the user"
    cTokenBalance: BigInt!
    "Total amount of underlying supplied"
    totalUnderlyingSupplied: BigInt!
    "Total amount of underling redeemed"
    totalUnderlyingRedeemed: BigInt!
    "The value of the borrow index upon users last interaction"
    accountBorrowIndex: BigInt!
    "Total amount underlying borrowed, exclusive of interest"
    totalUnderlyingBorrowed: BigInt!
    "Total amount underlying repaid"
    totalUnderlyingRepaid: BigInt!
    "Current borrow balance stored in contract (exclusive of interest since accrualBlockNumber)"
    storedBorrowBalance: BigInt!

    # The following values are added by the JS Wrapper, and must be calculated with the most up
    # to date values based on the block delta for market.exchangeRate and market.borrowIndex
    # They do not need to be in the schema, but they will show up in the explorer playground
    # NOTE: this a custom feature that The Graph implemented for our subgraph. It's not yet
    # available to the public.

    # supplyBalanceUnderlying: BigInt!
    # FORMULA: supplyBalanceUnderlying = cTokenBalance * market.exchangeRate

    # lifetimeSupplyInterestAccrued: BigInt!
    # FORMULA: lifetimeSupplyInterestAccrued = supplyBalanceUnderlying - totalUnderlyingSupplied + totalUnderlyingRedeemed

    # borrowBalanceUnderlying: BigInt!
    # FORMULA: borrowBalanceUnderlying = storedBorrowBalance * market.borrowIndex / accountBorrowIndex

    # lifetimeBorrowInterestAccrued: BigInt!
    # FORMULA: lifetimeBorrowInterestAccrued = borrowBalanceUnderlying - totalUnderlyingBorrowed + totalUnderlyingRepaid
}

"""
Auxiliary entity for AccountCToken
"""
type AccountCTokenTransaction @entity {
  id: ID!

  account: AccountCToken!

  tx_hash: Bytes!

  timestamp: BigInt!

  block: BigInt!

  logIndex: BigInt!
}

"""
An interface for a transfer of any cToken. TransferEvent, MintEvent,
RedeemEvent, and LiquidationEvent all use this interface
"""
interface CTokenTransfer {
    "Transaction hash concatenated with log index"
    id: ID!
    "cTokens transferred"
    amount: BigInt!
    "Account that received tokens"
    to: Bytes!
    "Account that sent tokens"
    from: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
    "Symbol of the cToken transferred"
    cTokenSymbol: String!
}

"""
TransferEvent will be stored for every mint, redeem, liquidation, and any normal
transfer between two accounts.
"""
type TransferEvent implements CTokenTransfer @entity {
    "Transaction hash concatenated with log index"
    id: ID!
    "cTokens transferred"
    amount: BigInt!
    "Account that received tokens"
    to: Bytes!
    "Account that sent tokens"
    from: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
    "Symbol of the cToken transferred"
    cTokenSymbol: String!
}

"""
MintEvent stores information for mints. From address will always be a cToken
market address
"""
type MintEvent implements CTokenTransfer @entity {
    "Transaction hash concatenated with log index"
    id: ID!
    "cTokens transferred"
    amount: BigInt!
    "Account that received tokens (minter)"
    to: Bytes!
    "Account that sent tokens (CToken contract)"
    from: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
    "Symbol of the cToken transferred"
    cTokenSymbol: String!
    "Underlying token amount transferred"
    underlyingAmount: BigInt
}

"""
RedeemEvent stores information for redeems. To address will always be a
cToken market address
"""
type RedeemEvent implements CTokenTransfer @entity {
    "Transaction hash concatenated with log index"
    id: ID!
    "cTokens transferred"
    amount: BigInt!
    "Account that received tokens (CToken contract)"
    to: Bytes!
    "Account that sent tokens (redeemer)"
    from: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
    "Symbol of the cToken transferred"
    cTokenSymbol: String!
    "Underlying token amount transferred"
    underlyingAmount: BigInt
}

"""
LiquidationEvent stores information for liquidations. The event is emitted from
the cToken market address.
"""
type LiquidationEvent implements CTokenTransfer @entity {
    "Transaction hash concatenated with log index"
    id: ID!
    "cTokens seized"
    amount: BigInt!
    "Liquidator receiving tokens"
    to: Bytes!
    "Account being liquidated (borrower)"
    from: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
    "cToken that was sezied as collateral"
    cTokenSymbol: String!
    "Symbol of the underlying asset repaid through liquidation"
    underlyingSymbol: String!
    "Underlying cToken amount that was repaid by liquidator"
    underlyingRepayAmount: BigInt!
}

"""
Underlying transfers are transfers of underlying collateral for both borrows
and repays
"""
interface UnderlyingTransfer {
    "Transaction hash concatenated with log index"
    id: ID!
    "Amount of underlying borrowed"
    amount: BigInt!
    "Total borrows of this asset the account has"
    accountBorrows: BigInt!
    "Account that borrowed the tokens"
    borrower: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
    "Symbol of the borrowed underlying asset"
    underlyingSymbol: String!
}

"""
BorrowEvent stores information for borrows
"""
type BorrowEvent implements UnderlyingTransfer @entity {
    "Transaction hash concatenated with log index"
    id: ID!
    "Amount of underlying borrowed"
    amount: BigInt!
    "Total borrows of this asset the account has"
    accountBorrows: BigInt!
    "Account that borrowed the tokens"
    borrower: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
    "Symbol of the borrowed underlying asset"
    underlyingSymbol: String!
}

"""
RepayEvent stores information for repays. Payer is not always the same as
borrower, such as in the event of a Liquidation
"""
type RepayEvent implements UnderlyingTransfer @entity {
    "Transaction hash concatenated with log index"
    id: ID!
    "Amount of underlying repaid"
    amount: BigInt!
    "Total borrows of this asset the account has"
    accountBorrows: BigInt!
    "Account that borrowed the tokens"
    borrower: Bytes!
    "Block number"
    blockNumber: Int!
    "Block time"
    blockTime: Int!
    "Symbol of the borrowed underlying asset"
    underlyingSymbol: String!
    "Payer of the borrow funds"
    payer: Bytes!
}

type CToken @entity {
  id: ID! # Transaction hash

  cToken: String!
}

